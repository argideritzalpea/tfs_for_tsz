;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Purepecha
;;; created at:
;;;     Fri Feb 17 00:24:55 UTC 2023
;;; based on Matrix customization system version of:
;;;     unknown time
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

head :+ [ MAIN_CLAUSE bool,
    PRON bool,
    NMZ bool,
    POSSESSOR poss,
    FORM form,
    AUX bool,
    INIT bool ].

basic-head-comp-phrase :+ [ SYNSEM [ LIGHT -,
             LOCAL.CAT.MC #mc,
             SUBORDINATED #subord ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT.MC #mc,
                      SUBORDINATED #subord ] ].

+np :+ [ CASE-MARKED bool,
    CASE case ].

coord-phrase :+ [ SYNSEM [ LOCAL.CAT.HEAD.NMZ #nmz,
             SUBORDINATED #subord ],
    LCOORD-DTR.SYNSEM [ LOCAL.CAT.HEAD.NMZ #nmz,
                        SUBORDINATED #subord ],
    RCOORD-DTR.SYNSEM [ LOCAL.CAT.HEAD.NMZ #nmz,
                        SUBORDINATED #subord ] ].

unary-bottom-coord-rule :+ [ SYNSEM [ LOCAL.CAT.HEAD.NMZ #nmz,
             SUBORDINATED #subord ],
    ARGS < [ SYNSEM [ LOCAL.CAT.HEAD.NMZ #nmz,
                      SUBORDINATED #subord ] ] > ].

inflected :+ [ NOUN-NUMBER-OR-TAM1-FLAG luk,
    NOUN-NUMBER-FLAG luk,
    TAM1-HABITUAL-PAST-FORM_XIREN-FLAG luk,
    CASE-OR-TAM3-FLAG luk,
    CASE-FLAG luk,
    CASE-OR-TAM2-FLAG luk,
    INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG luk,
    V-STEM-FLAG luk ].

infl-satisfied :+ [ NOUN-NUMBER-OR-TAM1-FLAG na-or-+,
    NOUN-NUMBER-FLAG na-or-+,
    TAM1-HABITUAL-PAST-FORM_XIREN-FLAG na-or-+,
    CASE-OR-TAM3-FLAG na-or-+,
    CASE-FLAG na-or-+,
    CASE-OR-TAM2-FLAG na-or-+,
    INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-+,
    V-STEM-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number ].

cat :+ [ POSSESSUM poss ].

poss := *top* &
  [ POSS-AGR png ].

basic-bare-np-phrase :+ [ SYNSEM.LOCAL.CAT [ VAL.SPEC < >,
                       HEAD #head,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD #head,
                                POSSESSUM #possessum & nonpossessive ] ].

basic-head-1st-comp-phrase :+ [ SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

basic-head-opt-subj-phrase :+ [ SYNSEM.SUBORDINATED #subord,
    HEAD-DTR.SYNSEM [ LOCAL.CAT.VAL.COMPS < >,
                      SUBORDINATED #subord ] ].

; We can't just use the V-final and V-initial word
; order modules together to get a good free word order
; module. The root of the problem seems to be that we
; need the subject to be able to attach inside the
; object(s) for VSO and OSV, but at the same time, we
; don't want complete flexibility on order of attachment
; when the verb is in the middle -- that would give
; spurious ambiguity.  This solution adopts the xmod
; hierarchy to enforce right-first attachment.  That is,
; all arguments appears to the right of the verb must
; attach before all arguments appearing to the left.  The
; linguistic prediction of this analysis is that free
; word order languages do not have a consistent VP
; consituent, even when the verb and object are adjacent
; (OV order).  Using a separate feature for tracking
; argument attachment (as opposed to modifier
; attachment).  We might be able to collapse these one
; day, but that's not obvious.

synsem :+ [ ATTACH xmod ].

; We'll need to add identification of ATTACH between
;     mother and head-daughter for all other kinds of phrases
;     if we do this.  Just for illustration, I'm putting it
;     in for head-adjunct phrases here:

head-mod-phrase :+ [ SYNSEM.ATTACH #attach,
    HEAD-DTR.SYNSEM.ATTACH #attach ].

top-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

bottom-coord-phrase :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    NONCONJ-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                   POSSESSUM #possessum ] ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

canonical-synsem :+ [ SUBORDINATED xsubord ].

xsubord := *top*.

none := xsubord.

because := xsubord.

if-or-when-or-while := xsubord.

basic-head-subj-phrase :+ [ SYNSEM.SUBORDINATED #subord,
    HEAD-DTR.SYNSEM.SUBORDINATED #subord ].

basic-head-opt-comp-phrase :+ [ SYNSEM.SUBORDINATED #subord,
    HEAD-DTR.SYNSEM.SUBORDINATED #subord ].

adj-head-phrase :+ [ SYNSEM.SUBORDINATED #subord,
    NON-HEAD-DTR.SYNSEM.SUBORDINATED #subord ].

head-adj-phrase :+ [ SYNSEM.SUBORDINATED #subord,
    NON-HEAD-DTR.SYNSEM.SUBORDINATED #subord ].

non-local-change-only-lex-rule :+ same-subordinated-lex-rule.

local-change-only-lex-rule :+ same-subordinated-lex-rule.

cont-change-only-lex-rule :+ same-subordinated-lex-rule.

cat-change-with-ccont-lex-rule :+ same-subordinated-lex-rule.

add-only-rule :+ same-subordinated-lex-rule.

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
3rd := person.
non-3rd := person.
2nd := non-3rd.
1st := non-3rd.

;;; Number

number := *top*.
pl := number.
sg := number.

;;; Possession

possession := *top*.
possessive := poss.  ; supertype for possessive features
nonpossessive := poss.  ; type for nonpossessive
possessor := possessive.
possessum := possessive.
possessive-1 := possessive.  ; supertype for strategy 1
possessor-1 := possessor & possessive-1.
possessum-1 := possessum & possessive-1.

;;; Case

case := *top*.
real-case := case.  ; intermediate case type for all real cases
nom := real-case.  ; nom
acc := real-case.  ; acc
gen := real-case.  ; gen
loc := real-case.  ; loc
com+ins := real-case.
com := com+ins.
ins := com+ins.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

tense+ := tense.
tense- := tense.
past := tense+.
nonpast := tense+.

;;; Aspect

asp+ := aspect.
asp- := aspect.
iter := aspect.
hab+aor := asp+.
hab := hab+aor & hab+cont.
aor := hab+aor & aor+prog.
prog := aor+prog.
hab+cont := asp+.
cont := hab+cont & aor+prog+cont.
aor+prog+cont := asp+.
aor+prog := aor+prog+cont.

;;; Mood

mood+ := mood.
mood- := mood.
irr+ := mood.
irr- := mood.
mood+_irr+ := mood+ & irr+.
mood+_irr- := mood+ & irr-.
ind+int := mood+.
imp+excl := mood+_irr-.
ind := ind+int.
int := ind+int.
imp := imp+excl.
excl := imp+excl.
deon := irr+.
epis := irr+.
ind_deon := ind & deon.
ind_epis := ind & epis.
ind_irr- := ind & irr-.
int_deon := int & deon.
int_epis := int & epis.
int_irr- := int & irr-.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-non-wh-word-lex & non-local-none-lex-item & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL.CAT [ VAL [ SPR < #spr &
                                   [ LOCAL.CAT.HEAD det ] >,
                             COMPS < >,
                             SUBJ < >,
                             SPEC < > ],
                       HEAD.NMZ - ] ].

common_noun-noun-lex := noun-lex & case-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun2-noun-lex := common_noun-noun-lex.

noun7-noun-lex := common_noun-noun-lex.

noun14-noun-lex := common_noun-noun-lex.

noun20-noun-lex := common_noun-noun-lex.

noun23-noun-lex := common_noun-noun-lex.

noun28-noun-lex := common_noun-noun-lex.

noun63-noun-lex := common_noun-noun-lex.

noun67-noun-lex := common_noun-noun-lex.

noun70-noun-lex := common_noun-noun-lex.

noun82-noun-lex := common_noun-noun-lex.

noun84-noun-lex := common_noun-noun-lex.

noun104-noun-lex := common_noun-noun-lex.

noun133-noun-lex := common_noun-noun-lex.

noun157-noun-lex := common_noun-noun-lex.

noun180-noun-lex := common_noun-noun-lex.

noun188-noun-lex := common_noun-noun-lex.

noun218-noun-lex := common_noun-noun-lex.

noun233-noun-lex := common_noun-noun-lex.

noun235-noun-lex := common_noun-noun-lex.

noun245-noun-lex := common_noun-noun-lex.

noun278-noun-lex := common_noun-noun-lex.

noun334-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

noun335-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM sg ] ] ].

noun336-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

noun338-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE gen,
                              CASE-MARKED + ] ] ].

noun339-noun-lex := noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM sg ] ] ].

noun340-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON +,
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun341-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM pl ] ],
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun345-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM sg ] ],
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun346-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM sg ] ],
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun347-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM pl ] ],
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun348-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM pl ] ],
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun352-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM sg ] ],
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun353-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM pl ] ],
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun354-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG [ PER 1st,
                                         NUM pl ],
                   CAT.HEAD [ PRON +,
                              CASE gen,
                              CASE-MARKED + ] ],
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun356-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM pl ] ],
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun357-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON +,
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun358-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM pl ] ],
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun359-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 3rd,
                                         NUM pl ] ],
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun360-noun-lex := noun-lex & case-rule-dtr & kinship-possessum-rule-dtr & noun-number-rule-dtr &
  [ SYNSEM.LOCAL [ CAT.HEAD.PRON +,
                   CONT.HOOK.INDEX.PNG [ PER 2nd,
                                         NUM pl ] ],
    INFLECTED [ NOUN-NUMBER-FLAG -,
                CASE-FLAG - ] ].

noun361-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

personal_pron-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

per1_pron-noun-lex := personal_pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

per2_pron-noun-lex := personal_pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

per3_pron-noun-lex := personal_pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

sg1_pron-noun-lex := per1_pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

sg1_pron_nom-noun-lex := sg1_pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

sg1_pron_gen-noun-lex := sg1_pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

pl1_pron-noun-lex := per1_pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

pl1_pron_nom-noun-lex := pl1_pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

pl1_pron_gen-noun-lex := pl1_pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

sg2_pron-noun-lex := per2_pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

sg2_pron_nom-noun-lex := sg2_pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

sg2_pron_gen-noun-lex := sg2_pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

pl2_pron-noun-lex := per2_pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

pl2_pron_nom-noun-lex := pl2_pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

pl2_pron_gen-noun-lex := pl2_pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

sg3_pron-noun-lex := per3_pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

sg3_pron_nom-noun-lex := sg3_pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

sg3_pron_gen-noun-lex := sg3_pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

pl3_pron-noun-lex := per3_pron-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

pl3_pron_nom-noun-lex := pl3_pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

pl3_pron_gen-noun-lex := pl3_pron-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

;;; Verbs

verb-lex := non-mod-lex-item & case-rule-dtr & nominalize_kwa-or-v-3pl-obj-rule-dtr & noun-number-rule-dtr & tam1-rule-dtr & tam2-rule-dtr & tam3-rule-dtr & voice-rule-dtr &
  [ INFLECTED [ V-STEM-FLAG -,
                NOUN-NUMBER-OR-TAM1-FLAG -,
                CASE-OR-TAM2-FLAG -,
                CASE-OR-TAM3-FLAG -,
                TAM1-HABITUAL-PAST-FORM_XIREN-FLAG na-or-- ],
    SYNSEM [ L-QUE -,
             LOCAL.CAT.HEAD verb &
                            [ NMZ - ],
             SUBORDINATED none ] ].

main-verb-lex := verb-lex & basic-verb-lex & basic-non-wh-word-lex &
  [ SYNSEM [ L-QUE -,
             LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPEC < >,
                                 SUBJ < #subj > ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex & basic-icons-lex-item &
  [ SYNSEM [ LOCAL.CAT.HEAD.AUX +,
             L-QUE - ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST < [ LOCAL.CAT.HEAD +np &
                              [ CASE real-case ] ] > ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD +np &
                              [ CASE real-case ] ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD +np &
                                [ CASE real-case ] ] ] > ].

clausal-verb-lex := main-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD +np ],
             #comps &
             [ LOCAL.CAT [ MC na-or--,
                           VAL [ SPR < >,
                                 COMPS < >,
                                 SUBJ < > ] ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ],
    SYNSEM.LOCAL.CAT.VAL.SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] >,
    SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] >,
                           COMPS < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ] ].

clausal-nom-verb-lex := clausal-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ],
    SYNSEM.LOCAL.CAT.VAL.SUBJ < [ LOCAL.CAT.HEAD.CASE-MARKED + ] > ].

intrans_bipart-stem_form-ka-verb-lex := nom-intransitive-verb-lex &
  [ INFLECTED [ INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG +,
                INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG + ] ].

trans_bipart-stem_form-ka-verb-lex := nom-acc-transitive-verb-lex &
  [ INFLECTED [ INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG +,
                INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG + ] ].

verb7-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb8-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb9-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb12-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb21-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb27-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb31-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb32-verb-lex := clausal-nom-verb-lex & clausal-second-arg-trans-lex-item &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or--,
    SYNSEM [ LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                         CASE-MARKED + ],
                             COMPS < [ LOCAL [ CAT [ HEAD comp &
                                                          [ MAIN_CLAUSE - ],
                                                     WH.BOOL - ],
                                               CONT.HOOK.INDEX [ E.MOOD mood-,
                                                                 SF prop ] ] ] > ],
             NON-LOCAL.QUE.LIST < > ] ].

verb42-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb60-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb75-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb102-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb105-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb124-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb126-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb149-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb154-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb157-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb159-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb163-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb167-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb176-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb183-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb229-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb243-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb252-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb257-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb272-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb282-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb286-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb304-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb310-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb312-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb317-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb340-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb352-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb358-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb373-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb385-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb386-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb387-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb402-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb410-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb419-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb420-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb430-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb432-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb436-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb485-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb552-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb568-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb595-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb599-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb604-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb620-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb621-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb626-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                     CASE-MARKED + ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb662-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb750-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom,
                                                       CASE-MARKED + ],
                           COMPS.FIRST.LOCAL.CAT.HEAD [ CASE acc,
                                                        CASE-MARKED + ] ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

verb755-verb-lex := transitive-verb-lex &
  [ INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj &
                                    [ LOCAL.CAT.HEAD.CASE real-case ] > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < unexpressed >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ] ] > ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item &
  [ ARG-ST < [ ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

s1sg_pronom_enclitic-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg,
                           COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ],
    INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na-or-- ].

;;;;;;;;;;;;;;;;;;;
;;; Subordinators
;;;;;;;;;;;;;;;;;;;

adverb-subord-lex-item := no-rels-hcons-lex-item & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL [ SUBJ < >,
                             SPR < >,
                             SPEC < >,
                             COMPS < > ],
                       HEAD adv &
                            [ MOD < [ SUBORDINATED none,
                                      LOCAL intersective-mod &
                                            [ CAT [ MC -,
                                                    HEAD verb ] ] ] > ] ] ].

--because-clause-init-adv-subord-lex-item := adverb-subord-lex-item &
  [ SYNSEM [ LOCAL.CAT [ POSTHEAD -,
                         HEAD [ MAIN_CLAUSE #feat,
                                MOD < [ LOCAL.CAT [ HEAD.MAIN_CLAUSE #feat & -,
                                                    VAL.COMPS < > ] ] > ] ],
             SUBORDINATED because ] ].

--if-or-when-or-while-clause-init-adv-subord-lex-item := adverb-subord-lex-item &
  [ SYNSEM [ LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.VAL.COMPS < > ] >,
             SUBORDINATED if-or-when-or-while ] ].

adv-marked-subord-clause-phrase := unary-phrase &
  [ SYNSEM.LOCAL [ CAT [ MC -,
                         VAL [ SPR < >,
                               COMPS < >,
                               SPEC < >,
                               SUBJ #subj ],
                         HEAD adp &
                              [ MOD < [ LOCAL scopal-mod &
                                              [ CAT [ HEAD verb,
                                                      VAL [ SPR < >,
                                                            COMPS < > ] ],
                                                CONT.HOOK [ LTOP #mcl,
                                                            INDEX #index ] ] ] > ] ],
                   COORD - ],
    C-CONT [ RELS.LIST < arg12-ev-relation &
                         [ ARG1 #mch,
                           ARG2 #sch ] >,
             HCONS.LIST < qeq &
                          [ HARG #mch,
                            LARG #mcl ],
                          qeq &
                          [ HARG #sch,
                            LARG #scl ] >,
             ICONS.LIST < >,
             HOOK.INDEX #index ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD verb &
                                       [ MOD < > ],
                                  VAL [ SUBJ #subj,
                                        SPR < >,
                                        COMPS < >,
                                        SPEC < > ] ],
                            CONT.HOOK.LTOP #scl,
                            COORD - ] ] > ].

because-modifying-clause-phrase := adv-marked-subord-clause-phrase &
  [ C-CONT.RELS.LIST < [ PRED "_because_subord_rel" ] >,
    ARGS < [ SYNSEM [ SUBORDINATED because,
                      LOCAL.CAT.VAL.SUBJ < > ] ] >,
    SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.VAL.SUBJ < > ] > ].

if-or-when-or-while-modifying-clause-phrase := adv-marked-subord-clause-phrase &
  [ C-CONT.RELS.LIST < [ PRED "_if-or-when-or-while_subord_rel" ] >,
    ARGS < [ SYNSEM [ SUBORDINATED if-or-when-or-while,
                      LOCAL.CAT.VAL.SUBJ < > ] ] >,
    SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.VAL.SUBJ < > ] > ].

;;; Complementizers

complementizer-lex-item := raise-sem-lex-item & non-local-none-lex-item & basic-icons-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SPEC < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

comps1-complementizer-lex-item := complementizer-lex-item & basic-non-wh-word-lex &
  [ SYNSEM.LOCAL [ CAT [ MC na-or--,
                         VAL.COMPS.FIRST.LOCAL [ CAT [ MC -,
                                                       HEAD.MAIN_CLAUSE - ],
                                                 CONT.HOOK.INDEX.E.MOOD mood- ] ],
                   CONT.HOOK.INDEX.SF prop ] ].

clause :+ [ SYNSEM.NON-LOCAL.QUE.LIST < > ].

;;; Others

;;; Case-marking adpositions
;;; Case marking adpositions are constrained not to
;;; be modifiers.

case-marking-adp-lex := non-local-none-lex-item & raise-sem-lex-item &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps >,
                             SPEC < > ],
                       HEAD adp &
                            [ CASE #case,
                              MOD < >,
                              POSSESSOR nonpossessive ],
                       POSSESSUM nonpossessive ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ VAL.SPR < >,
                           HEAD noun &
                                [ CASE #case & real-case,
                                  CASE-MARKED - ] ] ] > ].

;;; Adverbs

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

low-nominalization-lex-rule := cat-change-with-ccont-lex-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun &
                            [ NMZ +,
                              MOD #mod ],
                       VAL [ SUBJ < [ LOCAL [ CAT.VAL.SPR < >,
                                              CONT.HOOK.INDEX #subj ] ] >,
                             SPEC #spec,
                             SPR < [ OPT + ] > ],
                       MC #mc,
                       MKG #mkg,
                       HC-LIGHT #hc-light,
                       POSTHEAD #posthead ],
    C-CONT [ RELS.LIST < [ PRED "nominalized_rel",
                           LBL #ltop,
                           ARG0 ref-ind & #arg0,
                           ARG1 #arg1 ] >,
             HCONS.LIST < qeq &
                          [ HARG #arg1,
                            LARG #larg ] >,
             HOOK [ XARG #xarg,
                    INDEX #arg0,
                    LTOP #ltop ] ],
    DTR.SYNSEM.LOCAL [ CAT [ HEAD.MOD #mod,
                             VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #subj ] >,
                                   SPEC #spec ],
                             MC #mc,
                             MKG #mkg,
                             HC-LIGHT #hc-light,
                             POSTHEAD #posthead ],
                       CONT.HOOK [ XARG #xarg,
                                   LTOP #larg ] ] ].

low-nmz-subjid-compsid-lex-rule := low-nominalization-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                           SUBJ #subj ],
    DTR.SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                               SUBJ #subj ] ].

;;; Intermediate rule types

tam3-rule-dtr := word-or-lexrule.
voice-rule-dtr := word-or-lexrule.
nominalize_kwa-or-v-3pl-obj-rule-dtr := word-or-lexrule.
tam1-rule-dtr := word-or-lexrule.
kinship-possessum-rule-dtr := word-or-lexrule.
noun-number-rule-dtr := word-or-lexrule.
case-rule-dtr := word-or-lexrule.
tam2-rule-dtr := word-or-lexrule.

;;; Lexical rule types

case-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-FLAG +,
                CASE-OR-TAM2-FLAG +,
                CASE-OR-TAM3-FLAG +,
                NOUN-NUMBER-OR-TAM1-FLAG #noun-number-or-tam1,
                NOUN-NUMBER-FLAG #noun-number,
                TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
                INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                V-STEM-FLAG #v-stem ],
    DTR case-rule-dtr &
        [ INFLECTED [ INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                      NOUN-NUMBER-OR-TAM1-FLAG #noun-number-or-tam1,
                      NOUN-NUMBER-FLAG #noun-number,
                      TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
                      INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                      V-STEM-FLAG #v-stem ] ] ].

case_nom-lex-rule := case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

case_acc-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE acc,
                            CASE-MARKED + ] ].

case_gen-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

case_loc-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE loc,
                            CASE-MARKED + ] ].

case_com-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE com,
                            CASE-MARKED + ] ].

case_ins-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE ins,
                            CASE-MARKED + ] ].

case-synth-adp-lex-rule := case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE com+ins,
                            CASE-MARKED - ] ].

noun-number-lex-rule-super := add-only-no-ccont-rule & case-rule-dtr &
  [ INFLECTED [ NOUN-NUMBER-FLAG +,
                NOUN-NUMBER-OR-TAM1-FLAG +,
                TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
                CASE-OR-TAM3-FLAG #case-or-tam3,
                CASE-FLAG #case,
                CASE-OR-TAM2-FLAG #case-or-tam2,
                INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                V-STEM-FLAG #v-stem ],
    DTR noun-number-rule-dtr &
        [ INFLECTED [ INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                      TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
                      CASE-OR-TAM3-FLAG #case-or-tam3,
                      CASE-FLAG #case,
                      CASE-OR-TAM2-FLAG #case-or-tam2,
                      INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                      V-STEM-FLAG #v-stem ] ] ].

noun-plural-suffix-lex-rule := infl-lex-rule & noun-number-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

noun-singular-lex-rule := const-lex-rule & noun-number-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

kinship-possessum-lex-rule-super := add-only-no-ccont-rule & case-rule-dtr & infl-lex-rule & noun-number-rule-dtr &
  [ INFLECTED #infl,
    DTR kinship-possessum-rule-dtr &
        [ INFLECTED #infl ] ].

kinship-possessum-2per-possessor-lex-rule := kinship-possessum-lex-rule-super.

kinship-possessum-3per-possessor-lex-rule := kinship-possessum-lex-rule-super.

v-stem-lex-rule-super := add-only-no-ccont-rule & case-rule-dtr & nominalize_kwa-or-v-3pl-obj-rule-dtr & noun-number-rule-dtr & tam1-rule-dtr & tam2-rule-dtr & tam3-rule-dtr & voice-rule-dtr &
  [ INFLECTED [ V-STEM-FLAG +,
                NOUN-NUMBER-OR-TAM1-FLAG #noun-number-or-tam1,
                NOUN-NUMBER-FLAG #noun-number,
                TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
                CASE-OR-TAM3-FLAG #case-or-tam3,
                CASE-FLAG #case,
                CASE-OR-TAM2-FLAG #case-or-tam2,
                INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb ],
    DTR verb-lex &
        [ INFLECTED [ NOUN-NUMBER-OR-TAM1-FLAG #noun-number-or-tam1,
                      NOUN-NUMBER-FLAG #noun-number,
                      TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
                      INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                      CASE-OR-TAM3-FLAG #case-or-tam3,
                      CASE-FLAG #case,
                      CASE-OR-TAM2-FLAG #case-or-tam2,
                      INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb ] ] ].

v-stem-simple-lex-rule := const-lex-rule & v-stem-lex-rule-super &
  [ DTR.INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG na ].

v-stem-bipart+ka-lex-rule := infl-lex-rule & v-stem-lex-rule-super &
  [ DTR.INFLECTED.INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG + ].

v-3pl-obj-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & tam1-rule-dtr & tam2-rule-dtr & tam3-rule-dtr &
  [ INFLECTED #infl,
    DTR nominalize_kwa-or-v-3pl-obj-rule-dtr &
        [ INFLECTED #infl ] ].

v-3pl-obj-suffix-lex-rule := v-3pl-obj-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ NUM pl,
                                                                 PER 3rd ] ].

tam1-lex-rule-super := add-only-no-ccont-rule & tam2-rule-dtr & tam3-rule-dtr &
  [ INFLECTED [ NOUN-NUMBER-OR-TAM1-FLAG +,
                NOUN-NUMBER-FLAG #noun-number,
                CASE-OR-TAM3-FLAG #case-or-tam3,
                CASE-FLAG #case,
                CASE-OR-TAM2-FLAG #case-or-tam2,
                INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                V-STEM-FLAG #v-stem ],
    DTR tam1-rule-dtr &
        [ INFLECTED [ INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                      NOUN-NUMBER-FLAG #noun-number,
                      CASE-OR-TAM3-FLAG #case-or-tam3,
                      CASE-FLAG #case,
                      CASE-OR-TAM2-FLAG #case-or-tam2,
                      INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                      V-STEM-FLAG #v-stem ] ] ].

tam1-habitual-past-form_xiren-lex-rule := infl-lex-rule & tam1-hab-check-lex-rule &
  [ INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

tam1-habitual-form_xin-lex-rule := infl-lex-rule & tam1-hab-check-lex-rule &
  [ INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    DTR.INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren ].

tam1-habitual-past-subord-form-reduced-lex-rule := tam1-fin-subord-check-lex-rule & tam1-hab-check-lex-rule &
  [ INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    DTR.INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

tam1-aor-check-lex-rule := tam1-asp-tense-check-lex-rule &
  [ INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    DTR.INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT aor ].

tam1-progressive-mc-lex-rule := tam1-asp-tense-check-lex-rule & tam1-fin-mc-check-lex-rule &
  [ INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    DTR.INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT prog ].

tam1-continuative-mc-lex-rule := tam1-asp-tense-check-lex-rule & tam1-fin-mc-check-lex-rule &
  [ INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    DTR.INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT cont ].

tam1-fin-mc-check-lex-rule := infl-lex-rule & tam1-lex-rule-super &
  [ INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    DTR.INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    SYNSEM.LOCAL.CAT.HEAD [ MAIN_CLAUSE +,
                            FORM finite ] ].

tam1-fin-subord-check-lex-rule := const-lex-rule & tam1-lex-rule-super &
  [ INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    DTR.INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    SYNSEM.LOCAL.CAT.HEAD [ MAIN_CLAUSE -,
                            FORM finite ] ].

tam1-no-asp-tense-lex-rule := const-lex-rule & tam1-lex-rule-super &
  [ INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    DTR.INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ ASPECT asp-,
                                     TENSE tense- ] ].

tam1-asp-tense-check-lex-rule := tam1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ ASPECT asp+,
                                     TENSE tense+ ] ].

tam1-aorist-mc-lex-rule := tam1-aor-check-lex-rule & tam1-fin-mc-check-lex-rule.

tam1-aorist-subord-lex-rule := tam1-aor-check-lex-rule & tam1-fin-subord-check-lex-rule.

tam1-hab-check-lex-rule := tam1-asp-tense-check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT hab ].

tam2-lex-rule-super := add-only-no-ccont-rule & tam3-rule-dtr &
  [ INFLECTED [ CASE-OR-TAM2-FLAG +,
                NOUN-NUMBER-OR-TAM1-FLAG #noun-number-or-tam1,
                NOUN-NUMBER-FLAG #noun-number,
                TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
                CASE-OR-TAM3-FLAG #case-or-tam3,
                CASE-FLAG #case,
                INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                V-STEM-FLAG #v-stem ],
    DTR tam2-rule-dtr &
        [ INFLECTED [ NOUN-NUMBER-OR-TAM1-FLAG #noun-number-or-tam1,
                      NOUN-NUMBER-FLAG #noun-number,
                      TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
                      INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                      CASE-OR-TAM3-FLAG #case-or-tam3,
                      CASE-FLAG #case,
                      INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                      V-STEM-FLAG #v-stem ] ] ].

tam2-hab-or-cont-past-mc-lex-rule := tam2-fin-mc-check-lex-rule & tam2-past-lex-rule &
  [ DTR.INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG na,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT hab+cont ].

tam2-hab-past-subord-lex-rule := tam2-past-lex-rule & tam2-subord-tensed-check-lex-rule &
  [ DTR.INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG na,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT hab ].

tam2-habitual-past-form_xiren-lex-rule := const-lex-rule & tam2-asp-tense-check-lex-rule &
  [ DTR.INFLECTED.TAM1-HABITUAL-PAST-FORM_XIREN-FLAG + ].

tam2-fin-mc-check-lex-rule := tam2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD [ MAIN_CLAUSE +,
                            FORM finite ] ].

tam2-fin-subord-check-lex-rule := tam2-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD [ MAIN_CLAUSE -,
                            FORM finite ] ].

tam2-asp-tense-check-lex-rule := tam2-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ ASPECT asp+,
                                     TENSE tense+ ] ].

tam2-no-asp-tense-lex-rule := tam2-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ ASPECT asp-,
                                     TENSE tense- ] ].

tam2-subord-tensed-check-lex-rule := tam2-asp-tense-check-lex-rule & tam2-fin-subord-check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT hab+aor ].

tam2-past-lex-rule := infl-lex-rule & tam2-asp-tense-check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

tam2-nonpast-lex-rule := const-lex-rule & tam2-asp-tense-check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE nonpast ].

tam2-nonpast-mc-tam2-lex-rule := tam2-fin-mc-check-lex-rule & tam2-nonpast-lex-rule.

tam2-nonpast-subord-lex-rule := tam2-nonpast-lex-rule & tam2-subord-tensed-check-lex-rule.

tam2-aor-or-prog-past-mc-lex-rule := tam2-fin-mc-check-lex-rule & tam2-past-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT aor+prog ].

tam2-aor-past-subord-lex-rule := tam2-past-lex-rule & tam2-subord-tensed-check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT aor ].

tam2-deon-lex-rule := infl-lex-rule & tam2-no-asp-tense-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD deon ].

tam2-epis-lex-rule := infl-lex-rule & tam2-no-asp-tense-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD epis ].

tam2-no-asp-tense-irr-lex-rule := const-lex-rule & tam2-no-asp-tense-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD irr- ].

tam3-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-OR-TAM3-FLAG +,
                NOUN-NUMBER-OR-TAM1-FLAG #noun-number-or-tam1,
                NOUN-NUMBER-FLAG #noun-number,
                TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
                CASE-FLAG #case,
                CASE-OR-TAM2-FLAG #case-or-tam2,
                INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                V-STEM-FLAG #v-stem ],
    DTR tam3-rule-dtr &
        [ INFLECTED [ NOUN-NUMBER-OR-TAM1-FLAG #noun-number-or-tam1,
                      NOUN-NUMBER-FLAG #noun-number,
                      TAM1-HABITUAL-PAST-FORM_XIREN-FLAG #tam1-habitual-past-form_xiren,
                      INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                      CASE-FLAG #case,
                      CASE-OR-TAM2-FLAG #case-or-tam2,
                      INTRANS_BIPART-STEM_FORM-KA-VERB-OR-TRANS_BIPART-STEM_FORM-KA-VERB-FLAG #intrans_bipart-stem_form-ka-verb-or-trans_bipart-stem_form-ka-verb,
                      V-STEM-FLAG #v-stem ] ] ].

tam3-fin-mc-check-lex-rule := tam3-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.MOOD mood+,
                   CAT.HEAD [ MAIN_CLAUSE +,
                              FORM finite ] ] ].

tam3-fin-subord-lex-rule := infl-lex-rule & tam3-lex-rule-super &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.MOOD mood-,
                   CAT.HEAD [ MAIN_CLAUSE -,
                              FORM finite ] ] ].

tam3-asp-tense-check-lex-rule := tam3-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ ASPECT asp+,
                                     TENSE tense+,
                                     MOOD irr- ] ].

tam3-no-asp-tense-check-lex-rule := tam3-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ ASPECT asp-,
                                     TENSE tense- ] ].

tam3-irr+_check-lex-rule := tam3-no-asp-tense-check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD irr+ ].

tam3-irr-_check-lex-rule := tam3-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD irr- ].

tam3-indicative-check-lex-rule := infl-lex-rule & tam3-fin-mc-check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD ind ].

tam3-interrogative-check-lex-rule := tam3-fin-mc-check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD int ].

tam3-indicative_non3rd-lex-rule := tam3-indicative-check-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER non-3rd ].

tam3-indicative_3rd-lex-rule := tam3-indicative-check-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

tam3-interrogative_-ki-lex-rule := infl-lex-rule & tam3-interrogative-check-lex-rule & tam3-irr-_check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ ASPECT aor+prog+cont,
                                     TENSE nonpast ] ].

tam3-interrogative_-i_1-lex-rule := infl-lex-rule & tam3-interrogative-check-lex-rule & tam3-irr-_check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ ASPECT hab,
                                     TENSE nonpast ] ].

tam3-interrogative_-i_2-lex-rule := infl-lex-rule & tam3-interrogative-check-lex-rule & tam3-irr-_check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

tam3-interrogative_-i_3-lex-rule := infl-lex-rule & tam3-interrogative-check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD epis ].

tam3-interrogative_-zero-lex-rule := const-lex-rule & tam3-interrogative-check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD deon ].

tam3-imp+excl-check-lex-rule := tam3-fin-mc-check-lex-rule & tam3-irr-_check-lex-rule & tam3-no-asp-tense-check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD imp+excl ].

tam3-imp-check-lex-rule := tam3-imp+excl-check-lex-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.MOOD imp,
                   CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ] ].

tam3-imperative_sg-lex-rule := const-lex-rule & tam3-imp-check-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

tam3-imperative_pl-lex-rule := infl-lex-rule & tam3-imp-check-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

tam3-exclamative-lex-rule := infl-lex-rule & tam3-imp+excl-check-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD excl ].

tam3-nonfin-lex-rule := infl-lex-rule & tam3-irr-_check-lex-rule & tam3-no-asp-tense-check-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM nonfinite ].

voice-lex-rule-super := add-only-no-ccont-rule & case-rule-dtr & infl-lex-rule & nominalize_kwa-or-v-3pl-obj-rule-dtr & noun-number-rule-dtr & tam1-rule-dtr & tam2-rule-dtr & tam3-rule-dtr &
  [ INFLECTED #infl,
    DTR voice-rule-dtr &
        [ INFLECTED #infl ] ].

voice1-reflexive-middle-lex-rule := voice-lex-rule-super.

voice1-reciprocal-lex-rule := voice-lex-rule-super.

voice1-passive-lex-rule := voice-lex-rule-super.

voice1-antipassive-lex-rule := voice-lex-rule-super.

voice1-appl-3rd-obj-lex-rule := voice-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER non-3rd ].

voice1-appl-non3rd-obj-lex-rule := voice-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

nominalize_kwa-lex-rule-super := case-rule-dtr & infl-lex-rule & low-nmz-subjid-compsid-lex-rule & noun-number-rule-dtr &
  [ INFLECTED #infl,
    DTR nominalize_kwa-or-v-3pl-obj-rule-dtr &
        [ INFLECTED #infl ] ].

v_nom_kwa_lrt1-lex-rule := nominalize_kwa-lex-rule-super.

same-subordinated-lex-rule := lex-rule &
  [ SYNSEM.SUBORDINATED #subord,
    DTR.SYNSEM.SUBORDINATED #subord ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

context1-decl-head-opt-subj-phrase := decl-head-opt-subj-phrase &
  [ HEAD-DTR.SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.MOOD ind,
                            CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ] ].

context2-decl-head-opt-subj-phrase := decl-head-opt-subj-phrase &
  [ HEAD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD imp ].

context3-decl-head-opt-subj-phrase := decl-head-opt-subj-phrase &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                         NUM sg ] ].

non-event-subj-head-phrase := head-final-head-nexus & basic-head-subj-phrase &
  [ HEAD-DTR.SYNSEM [ LOCAL.CONT.HOOK.INDEX ref-ind,
                      NON-LOCAL [ QUE.LIST < >,
                                  REL.LIST < > ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < > ].

non-event-head-subj-phrase := head-initial-head-nexus & basic-head-subj-phrase &
  [ HEAD-DTR.SYNSEM [ LOCAL.CONT.HOOK.INDEX ref-ind,
                      NON-LOCAL [ QUE.LIST < >,
                                  REL.LIST < > ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < > ].

poss-phrase-1 := binary-headed-phrase &
  [ SYNSEM.LOCAL.CAT [ HEAD #head,
                       VAL [ COMPS < >,
                             SUBJ < >,
                             SPEC < >,
                             SPR < > ] ],
    HEAD-DTR.SYNSEM.LOCAL [ CAT [ POSSESSUM nonpossessive,
                                  HEAD #head & noun &
                                       [ POSSESSOR nonpossessive,
                                         PRON - ],
                                  VAL.SPR < [ ] > ],
                            CONT.HOOK #hook &
                                      [ LTOP #lbl,
                                        INDEX #possessum &
                                              [ COG-ST uniq-id ] ] ],
    C-CONT [ HOOK #hook &
                  [ INDEX #possessum ],
             ICONS.LIST < >,
             RELS.LIST < arg12-ev-relation &
                         [ PRED "poss_rel",
                           LBL #lbl,
                           ARG1 #possessum,
                           ARG2 #possessor ],
                         quant-relation &
                         [ PRED "exist_q_rel",
                           ARG0 #possessum,
                           RSTR #harg ] >,
             HCONS.LIST < qeq &
                          [ HARG #harg,
                            LARG #lbl ] > ],
    NON-HEAD-DTR.SYNSEM.LOCAL [ CONT.HOOK.INDEX #possessor,
                                CAT [ POSSESSUM nonpossessive,
                                      VAL.SPR < >,
                                      HEAD noun &
                                           [ POSSESSOR nonpossessive,
                                             CASE gen,
                                             CASE-MARKED + ] ] ] ].

poss-phrase-1-head-initial := head-initial & poss-phrase-1.

poss-phrase-1-head-final := head-final & poss-phrase-1.

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-initial-head-nexus := head-initial &
  [ SYNSEM.ATTACH lmod,
    HEAD-DTR.SYNSEM.ATTACH notmod-or-lmod ].

head-final-head-nexus := head-final &
  [ SYNSEM.ATTACH rmod ].

head-subj-phrase := decl-head-subj-phrase & head-initial-head-nexus.

subj-head-phrase := decl-head-subj-phrase & head-final-head-nexus.

; The head of head-comp-phrase can't be: ['adp']

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus &
  [ SYNSEM.LOCAL.CAT.HEAD +nvjrcdmo &
                          [ AUX - ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.INIT + ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD +nv &
                                   [ INIT - ] ].

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus.

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus.

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS.LIST < [ PRED "exist_q_rel" ] > ].

basic-filler-phrase :+ [ SYNSEM.NON-LOCAL.SLASH.LIST < >,
    ARGS < [ SYNSEM [ LOCAL #slash,
                      NON-LOCAL.SLASH.LIST < > ] ],
           [ SYNSEM.NON-LOCAL.SLASH.LIST < #slash > ] > ].

extracted-subj-phrase := basic-extracted-subj-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

;;; Wh-question-related phrasal types

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].
